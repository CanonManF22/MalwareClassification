from os import walk
import os
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import style
style.use("ggplot")
from sklearn.cluster import KMeans
from sklearn.neural_network import MLPClassifier

#gets opcode counts as dictionary for .asm malware
instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']

virus_data =[]
#for i in [1]:
for i in range(1, 4):
    mappings = dict()
    for instruction in instruction_dictionary:
        mappings[instruction] = 0

    with open('/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/Train/family_' + str(i) + '_filenames.txt') as virus_filenames:
        fileCount = 0
        #list of lists of counts for file series
        family1_malware_values = []
        for filename in virus_filenames:
            fileCount += 1
            if fileCount >= 30:
                break
            print('filename', filename, ' ', fileCount)
            #/Users/avibanerjee/Documents/College/cs185c/.TheUnarchiverTemp0/train/0A32eTdBKayjCWhZqDOQ.asm
            try:
                with open('/Users/avibanerjee/Documents/College/cs185c/.TheUnarchiverTemp0/train/' + str(filename).rstrip('\r\n') + '.asm', 'rb') as input:
                    #file to write to
                    with open('/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/SVM/family' + str(i) + '_opcodecounts.txt', 'w') as output:
                        for line in input:
                            string = str(line)
                            for instruction in mappings.keys():
                                if instruction in string:
                                    mappings[instruction] += 1
                        #output.write(str(mappings.values()))
                        tmpLst = list(mappings.values())
                        total = sum(tmpLst)
                        for i, value in enumerate(tmpLst):
                            tmpLst[i] = value/total
                        family1_malware_values.append(tmpLst)
                        #print('family1_malware_values', len(family1_malware_values))
            except:
                print('file didnt exist')
    virus_data += family1_malware_values

# gets opcode counts from benign files
mypath = '/Users/avibanerjee/Documents/College/cs185c/Project/resources/BENIGN/cygwin-aps/'
read_directory = '/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/Resources/Benign_Data/cygwin-aps/'

instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']
mappings = dict()
for instruction in instruction_dictionary:
    mappings[instruction] = 0

files = []
for (dirpath, dirnames, filenames) in walk(read_directory):
    files.extend(filenames)
    break  
benign_values = []

fileCount = 0
for filename in files:
    fileCount += 1
    if fileCount >= 30:
        break
    command = 'objdump -d ' + read_directory + filename
    with os.popen(command) as input:
        for line in input:
            string = str(line)
            for instruction in mappings.keys():
                ##print(instruction, string)
                if instruction in string:
                    ##print(instruction)
                    mappings[instruction] += 1
        tmpLst = list(mappings.values())
        total = sum(tmpLst)
        for i, value in enumerate(tmpLst):
            tmpLst[i] = value/total
        benign_values.append(tmpLst)
       
training_data = virus_data + benign_values
training_data = np.array(training_data)

#create score vectors. 1 for positive, -1 for negative (benign)
y0 = [1 for i in range(0, len(virus_data))]
y1 = [-1 for i in range(0, len(benign_values))]
y = y0 + y1
y = np.array(y)

#create classifier
kmeans = KMeans(n_clusters = 8)
kmeans.fit(training_data)

centroids = kmeans.cluster_centers_
labels = kmeans.labels_

print(centroids)
print(labels)
print(kmeans.score(training_data))

mlp = MLPClassifier(hidden_layer_sizes=(5,5),max_iter=500)
mlp.fit(training_data, y)
mlp.score('mlp score', np.array(virus_data), np.array(y0))

for i in range(1,10):
    kmeans = KMeans(n_clusters = i)
    kmeans.fit(training_data)
    centroids = kmeans.cluster_centers_
    labels = kmeans.labels_
    print(kmeans.score(training_data))
    print(centroids)