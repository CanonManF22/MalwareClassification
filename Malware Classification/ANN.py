from sklearn.neural_network import MLPClassifier
from os import walk
import os
import matplotlib as plot
import numpy as np
from matplotlib import style
style.use("ggplot")
'''
1. Each file is currently represented as a sequence of assembly instructions (dictionary below). Create feature vector of assembly counts. Normalize
2. Create training and testing sets for virus and benign files
3. Make Artificial Neural Network classifier, train, test
'''
#gets opcode counts as dictionary for .asm malware
instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']
training_data = []
weights = []
for i in range(1,100):
    mappings = dict()
    for instruction in instruction_dictionary:
        mappings[instruction] = 0

    with open('/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/Train/family_' + str(i) + '_filenames.txt') as virus_filenames:
        fileCount = 0
        #list of lists of counts for file series
        malware_values = []
        for filename in virus_filenames:
            weights.append(i)
            fileCount += 1
            if fileCount >= 10:
                break
            print('filename', filename, ' ', fileCount)
            with open('/Users/avibanerjee/Documents/College/cs185c/.TheUnarchiverTemp0/train/' + str(filename).rstrip('\r\n') + '.asm', 'rb') as input:
                #file to write to
            
                for line in input:
                    string = str(line)
                    for instruction in mappings.keys():
                        if instruction in string:
                            mappings[instruction] += 1
               
                tmpLst = list(mappings.values())
                total = sum(tmpLst)
                for i, elem in enumerate(tmpLst):
                    tmpLst[i] = elem/total
                #print(tmpLst)
                malware_values.append(tmpLst)
    training_data += malware_values


read_directory = '/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/Resources/Benign_Data/cygwin-aps/'

instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']
mappings = dict()
for instruction in instruction_dictionary:
    mappings[instruction] = 0

files = []
for (dirpath, dirnames, filenames) in walk(read_directory):
    files.extend(filenames)
    break  
benign_values = []

fileCount = 0
for filename in files:
    fileCount += 1
    if fileCount >= 100:
        break
    command = 'objdump -d ' + read_directory + filename
    with os.popen(command) as input:
        for line in input:
            string = str(line)
            for instruction in mappings.keys():
                if instruction in string:
                    mappings[instruction] += 1
        tmpLst = list(mappings.values())
        benign_values.append(tmpLst)
        
training_data = malware_values + benign_values
training_data = np.array(training_data)

#1 for malware
y0 = [1 for i in range (0, len(malware_values))]
#-1 for benign
y1 = [-1 for i in range(0, len(benign_values))]
y = y0 + y1

y = np.array(weights + y1)
#create classifier
mlp = MLPClassifier(hidden_layer_sizes=(5,5),max_iter=1000)
mlp.fit(training_data, y)


#TESTING
instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']
mappings = dict()
for instruction in instruction_dictionary:
    mappings[instruction] = 0

with open('/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/SVM/Test/family1_test_file.txt') as virus_filenames:
    fileCount = 0
    #list of lists of counts for file series
    malware_values = []
    for filename in virus_filenames:
        fileCount += 1
        if fileCount >= 100:
            break
        print('filename', filename, ' ', fileCount)
        with open('/Users/avibanerjee/Documents/College/cs185c/.TheUnarchiverTemp0/train/' + str(filename).rstrip('\r\n') + '.asm', 'rb') as input:
            #file to write to
            with open('/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/SVM/family1_opcodecounts.txt', 'w') as output:
                for line in input:
                    string = str(line)
                    for instruction in mappings.keys():
                        if instruction in string:
                            mappings[instruction] += 1
                output.write(str(mappings.values()))
                tmpLst = list(mappings.values())
                #print(tmpLst)
                malware_values.append(tmpLst)

#gets opcode counts from benign files
read_directory = '/Users/avibanerjee/Documents/College/cs185c/MalwareDetection/Resources/Benign_Data/cygwin-aps/'

instruction_dictionary = ['mov', 'xchg', 'stc', 'clc', 'cmc', 'std', 'cld', 'sti', 'cli', 'push', 'pushf', 'pusha', 'pop', 'popf', 'popa', 'cbw', 'cwd', 'cwde', 'in', 'out', 'add', 'adc', 'sub', 'sbb', 'div', 'idiv', 'mul', 'imul', 'inc', 'dec', 'cmp', 'sal', 'sar', 'rcl', 'rcr', 'rol', 'ror', 'neg', 'not', 'and', 'or', 'xor', 'shl', 'shr', 'nop', 'lea', 'int', 'call', 'jmp', 'je', 'jz', 'jcxz', 'jp', 'jpe', 'ret', 'jne', 'jnz', 'jecxz', 'jnp', 'jpo', 'ja', 'jae', 'jb', 'jbe', 'jna', 'jnae', 'jnb', 'jnbe', 'jc', 'jnc', 'jg', 'jge', 'jl', 'jle', 'jng', 'jnge', 'jnl', 'jnle', 'jo', 'jno', 'js', 'jns']
mappings = dict()
for instruction in instruction_dictionary:
    mappings[instruction] = 0

files = []
for (dirpath, dirnames, filenames) in walk(read_directory):
    files.extend(filenames)
    break  
benign_values = []

fileCount = 0
#go from end of list for test
for filename in files[::-1]:
    fileCount += 1
    if fileCount >= 100:
        break
    command = 'objdump -d ' + read_directory + filename
    with os.popen(command) as input:
        for line in input:
            string = str(line)
            for instruction in mappings.keys():
                if instruction in string:
                    mappings[instruction] += 1
        tmpLst = list(mappings.values())
        benign_values.append(tmpLst)

y0 = [1 for i in range (0, len(malware_values))]
malware_values = np.array(malware_values)
print('score', mlp.score(malware_values, y0))

